name: security scan
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GIT_TAG: ${{ github.sha }}

jobs:
  sonarcloud-scan:
    name: sonarcloud-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info
  snyk-scan:
    name: snyk-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
        with:
          arguments: build

#      - name: Gradle build
#        uses: gradle/gradle-build-action@v1
#        env:
#          #GRADLE_USER_HOME: $GITHUB_WORKSPACE/.gradle
#          SPRING_PROFILES_ACTIVE: gitlab-ci
#          GITHUB_TOKEN: ${{ secrets.M_GITHUB_TOKEN }}
#        with:
#          gradle-version: 6.8.3
#          gradle-executable: $GITHUB_WORKSPACE/gradlew
#          distributions-cache-enabled: true
#          dependencies-cache-enabled: true
#          configuration-cache-enabled: false
#
#          arguments: clean bootJar
#      - name: Log in to the Container registry
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#          tags: ${{ env.GIT_TAG }}

      - name: Build Image
        run: |-
          pwd
          ls -al
          docker build  --tag "java_demo:${{ env.GIT_TAG }}" .
          docker tag "java_demo:${{ env.GIT_TAG }}" java_demo:1.0
        shell: bash
#      - name: Build and push Docker image
#        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}

#       - name: Run Snyk to check Docker image for vulnerabilities
#         uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           image: java_demo:1.0
#           command: monitor
#           args: --severity-threshold=high
#       - name: snyk
#         run: |
#           ls
#           cat snyk.sarif
#       - name: Check to see if the SARIF a was generated
#         id: sarif_file_exists
#         uses: andstor/file-existence-action@v1
#         with:
#           files: 'snyk.sarif'
#       - name: Upload result to GitHub Code Scanning
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: snyk.sarif
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@2a2157eb22c08c9a1fac99263430307b8d1bc7a2
        with:
          image-ref: java_demo:1.0
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
      - name: trivy
        run: |
          ls
          cat trivy-results.json
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  hawkscan:
    name: hawk-scan
    runs-on: ubuntu-latest
    steps:
      - name: Sync ArgoCD Application
        uses: omegion/argocd-actions@v0.2.0
        with:
          address: "argocd.ngrok.buildsecurity.in"
          token: ${{ secrets.ARGOCD_TOKEN }}
          appName: "java-demo-dev"
      - name: Sleep for 30s
        uses: juliangruber/sleep-action@v1
        with:
          time: 30s
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Run HawkScan
        uses: stackhawk/hawkscan-action@v2.0.0
        with:
          apiKey: ${{ secrets.HAWKSCAN_TOKEN }}
