name: security scan
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GIT_TAG: ${{ github.sha }}

jobs:
  codeql:
    name: codeql
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
        with:
          arguments: build
      - run: mkdir codeql
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          output: ./codeql
          upload: false
      - run: |
          cat ./codeql/java.sarif
      - name: Publish report to defectdojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          engagement: ${{ secrets.ENGAGEMENT }}
          product_name: ${{ secrets.PRODUCT_NAME }}
          file: ./codeql/java.sarif
          scan_type: SARIF
          test_title: Codeql Scan
          tags: codeql
          skip_duplicates: true
          close_old_findings: true
          branch_tag: main
          build_id: ${{ github.run_id }}
          commit_hash: ${{ github.sha }}
      - name: Show response of defectdojo
        run: |
          echo ${{ steps.import-scan.outputs.response }}
#  dependency-check:
#    name: dependency-check
#    runs-on: ubuntu-latest
#    permissions:
#      actions: read
#      contents: read
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
#        with:
#          arguments: build
#      - run: |
#          ls -a /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.3-7/x64/bin
#      - name: Depcheck
#        uses: dependency-check/Dependency-Check_Action@main
#        env:
#          JAVA_HOME: /opt/jdk
#        with:
#          project: 'demo'
#          path: '.'
#          format: 'XML'
#      - name: Upload Test results
#        uses: actions/upload-artifact@master
#        with:
#          name: Depcheck report
#          path: ${{github.workspace}}/reports
#      - run: |
#          ls ${{github.workspace}}/reports
#      - name: Publish report to defectdojo
#        id: import-scan
#        uses: ivanamat/defectdojo-import-scan@v1
#        with:
#          token: ${{ secrets.DEFECTOJO_TOKEN }}
#          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
#          engagement: ${{ secrets.ENGAGEMENT }}
#          product_name: ${{ secrets.PRODUCT_NAME }}
#          file: ./codeql/java.sarif
#          scan_type: SARIF
#          test_title: Dependency check
#          tags: dependency_check
#          skip_duplicates: true
#          close_old_findings: true
#          branch_tag: main
#          build_id: ${{ github.run_id }}
#          commit_hash: ${{ github.sha }}
#      - name: Show response of defectdojo
#        run: |
#          echo ${{ steps.import-scan.outputs.response }}
#   sonarcloud-scan:
#     name: sonarcloud-scan
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: 17
#       - name: Cache SonarCloud packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache Gradle packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.gradle/caches
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#           restore-keys: ${{ runner.os }}-gradle
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         run: ./gradlew build sonarqube --info
#   sonarcloud-upload:
#     name: sonarcloud-scan-upload
#     runs-on: ubuntu-latest
# #    needs: sonarcloud-scan
#     steps:
#       - name: dowload tool
#         run: npm install -g sonar-report
#       - name: doload sonar report
#         run: |
#           sonar-report \
#             --sonarurl="https://sonarcloud.io" \
#             --sonarOrganization="KangxinLib" \
#             --sonarcomponent="KangxinLib_java_demo" \
#             --project="KangxinLib_java_demo" \
#             --application="KangxinLib_java_demo" \
#             --release="1.0.0" \
#             --branch="main" \
#             --sinceleakperiod="false" \
#             --allbugs="false" > sonar-report_sonar-report.html
#       - name: Publish report to defectdojo
#         id: import-scan
#         uses: ivanamat/defectdojo-import-scan@v1
#         with:
#           token: ${{ secrets.DEFECTOJO_TOKEN }}
#           defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
#           engagement: ${{ secrets.ENGAGEMENT }}
#           product_name: ${{ secrets.PRODUCT_NAME }}
#           file: sonar-report_sonar-report.html
#           scan_type: SonarQube Scan detailed
#           test_title: Sonar Scan detailed
#           tags: Sonar
#           skip_duplicates: true
#           close_old_findings: true
#           branch_tag: ${{ github.base_ref }}
#           build_id: ${{ github.run_id }}
#           commit_hash: ${{ github.sha }}
#       - name: Show response of defectdojo
#         run: |
#           set -e
#           printf '%s\n' '${{ steps.import-scan.outputs.response }}'
  snyk-scan:
    name: snyk-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Publish report to defectdojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          engagement: ${{ secrets.ENGAGEMENT }}
          product_name: ${{ secrets.PRODUCT_NAME }}
          file: snyk.sarif
          scan_type: SARIF
          test_title: Snyk Scan
          tags: snyk
          skip_duplicates: true
          close_old_findings: true
          push_to_jira: false
          branch_tag: ${{ github.base_ref }}
          build_id: ${{ github.run_id }}
          commit_hash: ${{ github.sha }}
      - name: Show response of defectdojo
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'
#   tfsec-scan:
#     name: tfsec-scan
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - uses: actions/checkout@v2
#       - name: Run tfsec
#         uses: tfsec/tfsec-sarif-action@9a83b5c3524f825c020e356335855741fd02745f
#         with:
#           sarif_file: tfsec.json
#       - name: cat tfsec
#         run: |
#           ls
#           cat tfsec.json
#       - name: Publish report to defectdojo
#         id: import-scan
#         uses: ivanamat/defectdojo-import-scan@v1
#         with:
#           token: ${{ secrets.DEFECTOJO_TOKEN }}
#           defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
#           engagement: ${{ secrets.ENGAGEMENT }}
#           product_name: ${{ secrets.PRODUCT_NAME }}
#           file: tfsec.json
#           scan_type: SARIF
#           test_title: tfsec Scan
#           tags: tfsec
#           skip_duplicates: true
#           close_old_findings: true
#           branch_tag: ${{ github.base_ref }}
#           build_id: ${{ github.run_id }}
#           commit_hash: ${{ github.sha }}
#       - name: Show response of defectdojo
#         run: |
#           set -e
#           printf '%s\n' '${{ steps.import-scan.outputs.response }}'
#   trivy-scan:
#     name: trivy-scan
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up JDK 17
#         uses: actions/setup-java@v2
#         with:
#           java-version: '17'
#           distribution: 'temurin'
#       - name: Build with Gradle
#         uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
#         with:
#           arguments: build
#       - name: Build Image
#         run: |-
#           pwd
#           ls -al
#           docker build  --tag "java_demo:${{ env.GIT_TAG }}" .
#           docker tag "java_demo:${{ env.GIT_TAG }}" java_demo:1.0
#         shell: bash
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@2a2157eb22c08c9a1fac99263430307b8d1bc7a2
#         with:
#           image-ref: java_demo:1.0
#           format: 'json'
#           output: 'trivy-results.json'
#           severity: 'CRITICAL,HIGH'
#       - name: Publish report to defectdojo
#         id: import-scan
#         uses: ivanamat/defectdojo-import-scan@v1
#         with:
#           token: ${{ secrets.DEFECTOJO_TOKEN }}
#           defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
#           engagement: ${{ secrets.ENGAGEMENT }}
#           product_name: ${{ secrets.PRODUCT_NAME }}
#           file: trivy-results.json
#           scan_type: Trivy Scan
#           test_title: Trivy Scan
#           tags: trivy
#           skip_duplicates: true
#           close_old_findings: true
#           push_to_jira: false
#           branch_tag: ${{ github.base_ref }}
#           build_id: ${{ github.run_id }}
#           commit_hash: ${{ github.sha }}
#       - name: Show response of defectdojo
#         run: |
#           echo ${{ steps.import-scan.outputs.response }}

#  hawkscan_defectdojo:
#    name: hawkscan_defectdojo
#    runs-on: ubuntu-latest
#    steps:
#      - name: Make Request
#        id: myRequest
#        uses: fjogeleit/http-request-action@v1
#        with:
#          url: "https://api.stackhawk.com/api/v1/scan/e3e27165-aea8-41e9-ad55-75970e1fa2be?pageSize=100&sortField=id&sortDir=desc"
#          bearerToken: ${{ secrets.HAWKSCAN_TEM_TOKEN }}
#          method: GET
#      - name: Save repo
#        run: |
#          echo '${{ steps.myRequest.outputs.response }}' >> hawkscan.json
#      - name: Publish report to defectdojo
#        id: import-scan
#        uses: ivanamat/defectdojo-import-scan@v1
#        with:
#          token: ${{ secrets.DEFECTOJO_TOKEN }}
#          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
#          engagement: ${{ secrets.ENGAGEMENT }}
#          product_name: ${{ secrets.PRODUCT_NAME }}
#          file: hawkscan.json
#          scan_type: StackHawk HawkScan
#          test_title: StackHawk HawkScan
#          tags: hawkscan
#          skip_duplicates: true
#          close_old_findings: true
#          branch_tag: ${{ github.base_ref }}
#          build_id: ${{ github.run_id }}
#          commit_hash: ${{ github.sha }}
#      - name: Show response of defectdojo
#        run: |
#          set -e
#          printf '%s\n' '${{ steps.import-scan.outputs.response }}'
  
  # hawkscan:
  #   name: hawk-scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Sync ArgoCD Application
  #       uses: omegion/argocd-actions@v0.2.0
  #       with:
  #         address: "argocd.ngrok.buildsecurity.in"
  #         token: ${{ secrets.ARGOCD_TOKEN }}
  #         appName: "java-demo-dev"
  #     - name: Sleep for 30s
  #       uses: juliangruber/sleep-action@v1
  #       with:
  #         time: 30s
  #     - name: Clone repo
  #       uses: actions/checkout@v2
  #     - name: Run HawkScan
  #       uses: stackhawk/hawkscan-action@v2.0.0
  #       with:
  #         apiKey: ${{ secrets.HAWKSCAN_TOKEN }}